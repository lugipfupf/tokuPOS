/*
 * Copyright (C) 2016 Beat Luginbühl <lugi@lugipfupf.ch>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.openbravo.pos.customers;

import com.openbravo.data.gui.Populator;
import com.openbravo.pos.panels.JPanelPopulatable;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Beat Luginbühl <lugi@lugipfupf.ch>
 */
public class JPanelCustomerList extends JPanelPopulatable {
    private final CustomerListModel model = new CustomerListModel();

    /**
     * Creates new form JPanelItemList
     */
    public JPanelCustomerList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        tblData.setModel(model);
        jScrollPane1.setViewportView(tblData);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public Populator<ArrayList<CustomerInfoExt>> getPopulator() {
        return (ArrayList<CustomerInfoExt> customerList) -> {
           CustomerInfoExt cust1 = new CustomerInfoExt(null);
           CustomerInfoExt cust2 = new CustomerInfoExt("1234");
           cust1.setFirstname("Yasmine");
           cust1.setLastname("Willi");
           cust2.setCard("blah");
           cust2.setFirstname("Beat");
           cust2.setLastname("Luginbühl");
           
           CustomerListItem item1 = new CustomerListItem(cust1, cust1.getId() != null);
           CustomerListItem item2= new CustomerListItem(cust2, cust2.getId() != null);
           
           ArrayList<CustomerListItem> items = new ArrayList<>();
           items.add(item1);
           items.add(item2);
           
           this.model.setData(items);
        };
    }

    @Override
    public boolean deactivate() {
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables

    private class CustomerListModel extends AbstractTableModel {
        private ArrayList<CustomerListItem> customerList = new ArrayList<>();
        private final HashMap<Integer, String> colNames = new HashMap<>();
        private final HashMap<Integer, Class> colTypes = new HashMap<>();
        
        public CustomerListModel() {
            colNames.put(0, "Card");
            colNames.put(1, "Firstname");
            colNames.put(2, "Lastname");
            
            colTypes.put(0, String.class);
            colTypes.put(1, String.class);
            colTypes.put(2, String.class);
        }
        
        public void setData(ArrayList<CustomerListItem> customers) {
            this.customerList = customers;
            
            fireTableDataChanged();
        }

        @Override
        public String getColumnName(int column) {
            return this.colNames.get(column);
        }
        
        @Override
        public Class<?> getColumnClass(int col) {
            return this.colTypes.get(col);
        }
        
        @Override
        public int getRowCount() {
            return customerList.size();
        }

        @Override
        public int getColumnCount() {
            return colNames.size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            MethodHandles.Lookup lookup = MethodHandles.lookup();
            try {
                // probably pretty inefficient...
                MethodHandle mh = lookup.findVirtual(CustomerInfoExt.class, "get" + colNames.get(columnIndex), MethodType.methodType(this.colTypes.get(columnIndex)));
                return mh.invoke(this.customerList.get(rowIndex).getCustomer());
            } catch (NoSuchFieldException ex) {
                Logger.getLogger(JPanelCustomerList.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(JPanelCustomerList.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Throwable ex) {
                Logger.getLogger(JPanelCustomerList.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            return null;
        }
        
    }
    
    private class CustomerListItem {
        private CustomerInfoExt customer;
        private boolean isExisting = false;

        public CustomerListItem(CustomerInfoExt customerInfoExt, boolean isExisting) {
            this.customer = customerInfoExt;
            this.isExisting = isExisting;
        }
        
        public CustomerInfoExt getCustomer() {
            return customer;
        }

        public boolean isIsExisting() {
            return isExisting;
        }
    }
}
